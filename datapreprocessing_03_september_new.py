# -*- coding: utf-8 -*-
"""datapreprocessing 03 September.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fRbjF41tfRZLPMgfNufbHSOhQ6oEqdh7
"""

import pandas as pd
import numpy as np

"""Handling Null values with Pandas"""

data=pd.Series(['one','two',np.nan,'four'])

data

data.isnull()
data.isna()

data.notnull()

#to drop that row having null value
data=data.dropna()

data

data

#fill the null value in 3rd with another value
data.fillna('three')

#creating dataframe with null values in some rows
df=pd.DataFrame([[1,2,3],[4,np.nan,6],[7,8,np.nan],[np.nan,np.nan,np.nan]])
df

df.isnull()

df.dropna(how='any')
df

df.dropna(how='all')

n=np.nan
df1=pd.DataFrame([[1,2,3,n],[4,n,5,6],[n,7,n,9],[10,n,n,n]])
df1

#drop the row that is having at least 2 not null values
df1.dropna(thresh=2)

df1.dropna(thresh=3)

df1

df1.fillna(100)

df1.fillna({0:100,1:200,2:300,3:400})

df1

df1.fillna({0:100,1:200,2:300,3:400},inplace=True)

df1

#ffill forward fill
#bfill backward fill
x=np.array([1,2,3,n,n,6,n,8,9,n,10,11,n,100,99,n])
df1=pd.DataFrame(x)
#print(x)
df1.fillna(method='ffill')

df1.ffill(axis=0)

df1.bfill(axis=0)

n=np.nan
df1=pd.DataFrame([[1,2,3,n],[4,n,5,6],[n,7,n,9],[10,n,n,n]])
df1

df1.iloc[:,0].mean()

df1.fillna(df1.mean())

dt=pd.read_csv('/content/loan_small.csv')
dt

dt.info()
dt.isnull()
dt.isnull().sum()

# the numerical column null values should be
# replaced with the columns's average value

# the categorical column null values should be
# replaced with the columns's mode value

df1.mean()

cols=['ApplicantIncome','CoapplicantIncome','LoanAmount']
dt[cols]
dt[cols].isnull().sum()
dt[cols]=dt[cols].fillna(dt[cols].mean())

dt[cols].mean()
dt[cols].std()
dt[cols].var()

cols=['Gender','Area','Loan_Status']
dt[cols]
dt[cols].isnull().sum()

dt[cols].mode()

dt.mode().iloc[0]
#dt.mean()

dt[cols].fillna(dt.mode().iloc[0])

#feature scaling
#standardization using standardscaler of sklearn
# Z-score normalization
#x=(x-mean)/sdv

mark=np.array([26,33,65,28,34,55,25,44,50,36,26,37,43])
df=pd.DataFrame(mark)
df

avg=df.mean()
avg

s=df.std()
s

for i in mark:
  print((i-avg)/s)

from sklearn.preprocessing import StandardScaler
data=[[155,55,30],[189,60,35],[170,78,45],[180,74,51]]

data

scaler=StandardScaler()

scaler.fit(data)

scaler.mean_

scaler.scale_

scaler.transform(data)

scaler.fit_transform(data)

import numpy as np
X=np.array([[1,-1,2],[2,0,0],[0,1,-1]])
X

#(x-min)/(max-min)
#(1-0)/(2-0)=>1/2=0.5

from sklearn.preprocessing import MinMaxScaler

mm_scaler=MinMaxScaler()

x_scaled=mm_scaler.fit_transform(X)

x_scaled

data
#binarizer
from sklearn.preprocessing import Binarizer
b=Binarizer(threshold=15).fit(data)
binary_data=b.transform(data)
binary_data

data

#encoding in a categorical column
#LabelEncoderdata=['C++','Java','Python','Rprog','Python','C++','Java','Python']

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

le.fit(data)

le.classes_

data=['PGDBDA','PGDAC','PGDAI','PGDCSF','PGDMC']
le.fit(data)
le.classes_



for i ,c in enumerate(le.classes_):
  print(c,'=',i)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
course=['PGDBDA','PGDAC','PGDAI','PGDCSF','PGDMC','PGDGI','PGHPC','PGDR']
lang=['C++','Java','Python','Rprog','Python','C++','Java','Python']
df=pd.DataFrame({'course':course,'lang':lang})
df

#encode the language column to numeric data
df['lang_ecoded']=le.fit_transform(df['lang'])
df
le.classes_

df

#one hot encoder
from sklearn.preprocessing import OneHotEncoder
ohe=OneHotEncoder()
ohe.fit(df)

df1=pd.DataFrame(ohe.fit_transform(df[['lang']]).toarray())

df1

df2=pd.concat([df,df1],axis=1)

df2

ohe.get_feature_names_out()

#get_dummies of pandas
df
df_encoded=pd.get_dummies(df,columns=['lang'],dtype=int)
df_encoded

dt

dt['Gender_new']=dt['Gender'].map({'Male':1,'Female':0})
dt
dt=dt.drop('Gender',axis=1)
dt

import category_encoders as ce
from cattegory_encoders import BinaryEncoder

data=pd.DataFrame({'city':['NewYork','NewYork',"Toronto",'Delhi','Tokyo','Aman','Delhi','Mumbai','Delhi',
'NewYork','capetown','noida','kolkata','chennai','faridabad']})
data

be=BinaryEncoder()

df1=be.fit_transform(data)
df1





